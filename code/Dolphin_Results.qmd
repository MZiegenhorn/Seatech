---
title: "Dolphin_Visualization"
author: "Anne Simonis"
format: pdf
editor: visual
---

## Goals of this study

Investigate patterns in the acoustic behavior of dolphins

## Data

Acoustic data was collected from drifting acoustic recorders during the 2018 California Current Ecosystem survey. See [Simonis et al 2020](https://repository.library.noaa.gov/view/noaa/27223) for more details. Data analyzed here includes CCES Drifts 10, 12, 13, 14, 16 (no detections on 16? no log on 20).

## Combine Logs

The presence of Dolphins and ships were logged by 1 Seatech analyst: Keisha Askoak.

```{r}
#| echo: false
#| message: false
#| warning: false

# # # if (!require("pacman")) install.packages("pacman")
# if(!require('devtools')) install.packages('devtools')
# # install from GitHub
# devtools::install_github('TaikiSan21/PAMmisc')
# devtools::install_github('ericpante/marmap')
suppressMessages(pacman::p_load(knitr,here,lubridate,dplyr,magrittr,xlsx,RSQLite,viridis,marmap,ggplot2,suncalc,ggnewscale,PAMmisc,stringr))

#Keisha's logs
LogKA<-list.files(here('data','2023','Keisha Askoak'), pattern='.xls',full.names = TRUE,recursive=TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments) %>%
  mutate(Analyst='KA')

#Save dolphin events and remove duplicates
Log <-LogKA %>%
  filter(Species.Code %in% c('UO')) %>%
  distinct() 

#Rename Drifts with word 'Drift'
Log$Input.file<-str_replace(Log$Input.file,'Drift-','CCES_')
Log$Input.file<-str_replace(Log$Input.file,'Drift_','CCES_')

#Define Drift Number based on input file
Ind<-str_locate(Log$Input.file,'CCES_')
Log$Drift<-substr(Log$Input.file,Ind+5,Ind+7)
Log$Drift<-as.numeric(gsub('\\\\','',Log$Drift))
#Create UTC variable for start time
Log$UTC<-with_tz(Log$Start.time,tz="GMT")
```

```{r}
#| echo: false
#| message: false
#| warning: false

drifts <- c(10,12,13,14,16)
#Create dataframe to save detections from all drifts
TimesAll<-data.frame()
GPSAll<-data.frame()

#Use PG databases for duty cycle times
#load database
sqlite <- dbDriver("SQLite")
dbfiles<-list.files(here('data','2023','CCES2018_Drifts','Beaked whales'),full.names=TRUE)

for(d in 1:length(drifts)){
  DriftID<-paste0('Drift-',drifts[d])
  conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,DriftID)))])
  DF <- dbReadTable(conn, "Sound_Acquisition")    
  GPS<-dbReadTable(conn,"gpsData")
  dbDisconnect(conn)
  
  GPS<-GPS %>%
    select(UTC,Latitude,Longitude)%>%
    mutate(Drift=DriftID,UTC=as.POSIXct(GPS$UTC,'%Y-%m-%d %H:%M',tz='GMT'))
    
    GPSAll<-rbind(GPS,GPSAll)
  
  DF<-DF %>%
    mutate(Status=gsub(" ","",Status)) 
  
  StartUTC<-DF %>% 
    filter(Status=="Start") %>%
    mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
    select(Start) 
  
  StopUTC<-DF %>% 
    filter(Status=="Stop") %>%
    mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
    select(Stop)  
  
  TimesDF<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
    mutate(Drift = DriftID)
  
  TimesDF$UO<-'Absent'
  
  #Loop through times to see if UO events span "recording on" periods             
   for(m in 1:nrow(Log)){
    IndStart<-max(which(TimesDF$Start<=Log$Start.time[m]))
    IndStop<-min(which(TimesDF$Stop>=Log$End.time[m]))
    if(IndStart>0){
      if(is.na(IndStop) | is.infinite(IndStop)){IndStop=IndStart}
      TimesDF$UO[IndStart:IndStop]<-'Present'
    }
  }              
     
  
  TimesUO<-TimesDF %>% 
    filter(UO=="Present")%>%
    mutate(Species=as.factor('Dolphin')) %>%
    select(Start,Drift,Species) %>%
    rename(UTC=Start)
  
  TimesAll<-rbind(TimesUO,TimesAll)
}

```

## Plots

### Diel Plot

```{r}
#Define Figure Options

figtitle<-c('Drift-10','Drift-12','Drift-13','Drift-14','Drift-16')
UOColor = 'blue'

```

```{r}
#| echo: false
#| message: false
#| warning: false

PlotPresDrifts<-function(figtitle){
  UODF<-(TimesAll) %>%
  filter(Drift==figtitle)
  
  GPSDF<-(GPSAll) %>%
  filter(Drift==figtitle)
  
  plotPresGrid(UODF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),type="presence",timeBin="minute",gps=GPSDF,title=paste0(figtitle,': Dolphins'),fill=UOColor)
}

lapply(figtitle,PlotPresDrifts)


```

### Weekly Plot

```{r}
#| echo: false
#| message: false
#| warning: false

PlotPresBars<-function(figtitle){
  UODF<-(TimesAll) %>%
  filter(Drift==figtitle)
  
  GPSDF<-(GPSAll) %>%
  filter(Drift==figtitle)
  
  plotPresBar(UODF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),timeBin="day",by="Species",title=paste0(figtitle,': Dolphins'),fill=Species)+
    scale_fill_manual(values=UOColor)
}

lapply(figtitle,PlotPresBars)

```

### Map

```{r}
#| echo: false
#| message: false
#| warning: false

#Function PlotPresMaps will map events on each drift 
PlotPresMaps<-function(figtitle){
  UODF<-(TimesAll) %>%
    filter(Drift==figtitle)
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle)
  
  #Define position of each event
  for(c in 1:nrow(UODF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,UODF$UTC[c],units="mins"))))
    UODF$Longitude[c]<-GPSDF$Longitude[Ind]
    UODF$Latitude[c]<-GPSDF$Latitude[Ind]
  }

  #define boundaries of the map
  lon1<-min(GPSDF$Longitude)-2
  lon2<-max(GPSDF$Longitude)+2
  lat1<-max(GPSDF$Latitude)+2
  lat2<-min(GPSDF$Latitude)-2

  #Extract bathymetry data from NOAA (saves local file to speed future performance)
  bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

  autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
    coord_cartesian(expand = 0)+
    geom_contour(aes(z=z),breaks=c(-100,-500,-1000),color="gray24")+
    scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                         colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
    geom_point(data=GPSDF,aes(Longitude,Latitude),size=0.1)+
    new_scale_color()+
    geom_point(data=UODF,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(UOColor), labels=c("Dolphins"),name="")+
    xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle)

}

lapply(figtitle,PlotPresMaps)

```

#### Map of all drifts

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4
#| fig-height: 6
#| fig-cap: Map of all drifts analyzed


#Create dataframe with positions of all events
UODF_gps<-data.frame()

for(d in 1:length(figtitle)){
    UODF<-(TimesAll) %>%
    filter(Drift==figtitle[d])
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle[d])

  #Define position of each event
  for(c in 1:nrow(UODF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,UODF$UTC[c],units="mins"))))
    UODF$Longitude[c]<-GPSDF$Longitude[Ind]
    UODF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
UODF_gps<-rbind(UODF,UODF_gps)
}

#define boundaries of the map
lon1=-132;lon2=-114;lat1=27;lat2=50

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPSAll,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=UODF_gps,aes(x=Longitude,y=Latitude,color=Species))+
  scale_color_manual(values=c(UOColor), labels=c("Dolphins"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle('All Drifts')

```

All drift timeseries

```{r}

#create counts vectors to compare across time
# get counts by hour of day- drift 10 is earliest and drift20 is latest
daybins = seq(as.POSIXct(min(TimesAll$UTC)),as.POSIXct(max(TimesAll$UTC)),'days')

#need pracma for histc
if(!require('pracma')) install.packages('pracma')
library(pracma)
library(dplyr)

#run through for each drift and add on to dataframe
whalecounts = data.frame(daybins)


for (iD in 1:length(figtitle)){

  driftTimes = filter(TimesAll,Drift==figtitle[iD])
  
  countdata = histc(as.numeric(driftTimes$UTC),as.numeric(daybins))
  whalecounts[,ncol(whalecounts)+1] = countdata$cnt
  colnames(whalecounts)[ncol(whalecounts)] = figtitle[iD]
}


#plot
ggplot(data=whalecounts,aes(x=daybins,y=counts,color=id))+
  geom_point()+
  facet_wrap(~driftlab,ncol=1)+
  ylim(0,9)

```
