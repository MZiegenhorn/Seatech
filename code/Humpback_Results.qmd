---
title: "Humpback Data Analysis"
author: "Anne Simonis"
format: pdf
editor: visual
---

## Goals of this study

Investigate the co-occurrence of humpback whales and vessel noise.

## Data

Acoustic data was collected from drifting acoustic recorders during the 2018 California Current Ecosystem survey. See [Simonis et al 2020](https://repository.library.noaa.gov/view/noaa/27223) for more details. Data analyzed here includes CCES Drifts 10, 12, 13, 14, 16, 20.

## Combine Logs

The presence of humpback whales and ships were logged by 3 Seatech analysts, including Virginia Pearson, Audrey Bahnke, and Sarah Bahnke.

```{r}
#| echo: false
#| message: false
#| warning: false

# # # if (!require("pacman")) install.packages("pacman")
# if(!require('devtools')) install.packages('devtools')
# # install from GitHub
devtools::install_github('TaikiSan21/PAMmisc')
# devtools::install_github('ericpante/marmap')
suppressMessages(pacman::p_load(knitr,here,lubridate,dplyr,magrittr,xlsx,RSQLite,viridis,marmap,ggplot2,suncalc,ggnewscale,PAMmisc,stringr,gridExtra,pracma))

#Sarah's logs
LogSB<-list.files(here('data','2023','Humpback whales','SB'), pattern='.xls',full.names = TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments) %>%
  mutate(Analyst='SB')

#Virginia's logs
LogVP<-list.files(here('data','2023','Humpback whales','VP'), pattern='.xls',full.names = TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments)%>%
  mutate(Analyst='VP')

#Audrey's logs
LogAB<-list.files(here('data','2023','Humpback whales','AB'), pattern='.xls',full.names = TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments)%>%
  mutate(Analyst='AB')

Log<-rbind(LogSB,LogVP,LogAB)

#Save Humpback and Anthropogenic sounds and remove duplicates
Log <-Log %>%
  filter(Species.Code %in% c('Mn','Anthro')) %>%
  filter(Call %in% c("Ship/Other","Ship/Small Boat",
                     "Song","Non-Song","Unspecified",'All')) %>%
  distinct() 

#Rename Drifts with word 'Drift'
Log$Input.file<-str_replace(Log$Input.file,'Drift-','CCES_')

#Define Drift Number based on input file
Ind<-str_locate(Log$Input.file,'CCES_')
Log$Drift<-substr(Log$Input.file,Ind+5,Ind+7)
Log$Drift<-as.numeric(gsub('\\\\','',Log$Drift))

#Create UTC variable for start time
Log$UTC<-with_tz(Log$Start.time,tz="GMT")

#Omit events with missing end time 
Log<-Log[-is.na(Log$End.time),]

```

```{r}
#| echo: false
#| message: false
#| warning: false

drifts <- c(10,12,13,14,16,20)
Species<-c('Mn','Anthro')

#Create dataframe to save detections from all drifts
TimesAll<-data.frame()
GPSAll<-data.frame()

#Use PG databases for duty cycle times
#load database
sqlite <- dbDriver("SQLite")
dbfiles<-list.files(here('data','2023','CCES2018_Drifts','Beaked whales'),full.names=TRUE)


#Use GPS csv files
GPSfiles<-list.files(here('data','2023','CCES2018_Drifts'),pattern='.csv')
Ind<-str_locate(GPSfiles,'CCES_')
GPSDrift<-substr(GPSfiles,Ind+5,Ind+7)
GPSDrift<-as.numeric(GPSDrift)

for(d in 1:length(drifts)){
  DriftID<-paste0('Drift-',drifts[d])
  conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,DriftID)))])
  DF <- dbReadTable(conn, "Sound_Acquisition")    
  dbDisconnect(conn)
  
  GPSInd<-which(GPSDrift == drifts[d])
  GPS<-read.csv(file=here('data','2023','CCES2018_Drifts',GPSfiles[GPSInd]))
  
  GPS<-GPS %>%
    select(UTC,Latitude,Longitude)%>%
    mutate(Drift=DriftID,UTC=as.POSIXct(GPS$UTC,'%Y-%m-%d %H:%M',tz='GMT'))
  
  GPSAll<-rbind(GPS,GPSAll)
  
  DF<-DF %>%
    mutate(Status=gsub(" ","",Status)) 
  
  StartUTC<-DF %>% 
    filter(Status=="Start") %>%
    mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
    select(Start) 
  
  StopUTC<-DF %>% 
    filter(Status=="Stop") %>%
    mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
    select(Stop)  
  
  TimesDF<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
    mutate(Drift = DriftID)
  
  TimesDF$Presence<-'Absent'
  TimesDF$Species<-'NA'
  
  #Loop through times to see if events span "recording on" periods               
  for(m in 1:nrow(Log)){
    IndStart<-max(which(TimesDF$Start<=Log$Start.time[m]))
    IndStop<-min(which(TimesDF$Stop>=Log$End.time[m]))
     # IndStop<-min(TimesDF$Stop>=Log$End.time[m])
    if(IndStart>0){
      if(is.na(IndStop) | IndStop==0 | is.infinite(IndStop)){IndStop=IndStart}
      TimesDF$Presence[IndStart:IndStop]<-'Present'
      TimesDF$Species[IndStart:IndStop]<-rep(Log$Species.Code[m],length(IndStart:IndStop))
    }
  }              
  
  TimesDF<-TimesDF %>% 
    filter(Presence=="Present")%>%
    select(Start,Drift,Species) %>%
    rename(UTC=Start)

  TimesAll<-rbind(TimesDF,TimesAll)
}

```

## Remove times with missing data

MEHS did not have audio data for the entire length of all drifts. Only show drift tracks and events from times where data was available

```{r}
#| echo: false
#| message: false
#| warning: false

#End dates identified by MEHS analysts
EndDates<-as.POSIXct(c('2018-10-21 23:59','2018-09-12 23:59','2018-09-25 23:59','2018-10-11 23:59','2018-11-15 23:59','2018-11-22 23:59'),tz='GMT')

#Confirm end dates match number of drifts
if(length(EndDates)==length(drifts)){
DataStop<-data.frame(EndDates,drifts=paste0('Drift-',drifts))

for(d in 1:length(drifts)){
 #remove events 
 removeEventInd<-which(TimesAll$Drift==DataStop$drifts[d] & TimesAll$UTC>DataStop$EndDates[d])
 if(length(removeEventInd)>0){TimesAll<-TimesAll[-removeEventInd,]}
 remove(removeEventInd)
 
 #remove GPS data
 removeGPSInd<-which(GPSAll$Drift==DataStop$drifts[d] & GPSAll$UTC>DataStop$EndDates[d])
  if(length(removeGPSInd)>0){GPSAll<-GPSAll[-removeGPSInd,]}
 remove(removeGPSInd)
}  
}
```

## Plots

### Diel Plot

```{r}
#Define Figure Options
figtitle<-c('Drift-10','Drift-12','Drift-13','Drift-14','Drift-16','Drift-20')

MnColor = 'blue'
ShipColor = 'magenta'
```

```{r}
#| echo: false
#| message: false
#| warning: false


PlotPresDrifts<-function(figtitle){
  MnDF<-(TimesAll) %>%
  filter(Drift==figtitle,Species=="Mn")

  AnthroDF<-(TimesAll) %>%
  filter(Drift==figtitle, Species=="Anthro")
  
  GPSDF<-(GPSAll) %>%
  filter(Drift==figtitle)

  DielMn = plotPresGrid(MnDF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),type="presence",gps=GPSDF,title=paste0(figtitle,': Humpback whales'),fill=MnColor)

  DielShip = plotPresGrid(AnthroDF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),type="presence",gps=GPSDF,title=paste0(figtitle,': Ships'),fill=ShipColor)
  
  grid.arrange(DielMn,DielShip,nrow=2)
  
}

lapply(figtitle,PlotPresDrifts)

```

### **Weekly Plot**

```{r}
#| echo: false
#| message: false
#| warning: false

PlotPresBars<-function(figtitle){
  SpDF<-(TimesAll) %>%
  filter(Drift==figtitle)
  
  GPSDF<-(GPSAll) %>%
  filter(Drift==figtitle)
  
  plotPresBar(SpDF,start=min(GPSDF$UTC),end=max(GPSDF$UTC),by="Species",title=paste0(figtitle,': Humpback whales and ships'),fill=Species)+
    scale_fill_manual(values=c(ShipColor, MnColor))
}

lapply(figtitle,PlotPresBars)

```

### Map

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4 
#| fig-height: 4 

#Function PlotPresMaps will map events on each drift 
PlotPresMaps<-function(figtitle){
  MnDF<-(TimesAll) %>%
    filter(Drift==figtitle, Species=="Mn")
  
  AnthroDF<-(TimesAll) %>%
    filter(Drift==figtitle, Species=="Anthro")
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle)
  
  #Define position of each event
  for(c in 1:nrow(MnDF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,MnDF$UTC[c],units="mins"))))
    MnDF$Longitude[c]<-GPSDF$Longitude[Ind]
    MnDF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
    for(c in 1:nrow(AnthroDF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,AnthroDF$UTC[c],units="mins"))))
    AnthroDF$Longitude[c]<-GPSDF$Longitude[Ind]
    AnthroDF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
  
  SpDF<-rbind(MnDF,AnthroDF)

  #define boundaries of the map
  lon1<-min(GPSDF$Longitude)-2
  lon2<-max(GPSDF$Longitude)+2
  lat1<-max(GPSDF$Latitude)+2
  lat2<-min(GPSDF$Latitude)-2

  #Extract bathymetry data from NOAA (saves local file to speed future performance)
  bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

  autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
    coord_cartesian(expand = 0)+
    geom_contour(aes(z=z),breaks=c(-100,-500,-1000),color="gray24")+
    scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                         colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
    geom_point(data=GPSDF,aes(Longitude,Latitude),size=0.1)+
    new_scale_color()+
    geom_point(data=SpDF,aes(x=Longitude,y=Latitude,color=Species))+
scale_color_manual(values=c(MnColor, ShipColor), labels=c("Humpback whales", "Ships"),name="")+
    xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle)

}

lapply(figtitle,PlotPresMaps)

```

#### Map of all drifts

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-width: 4 
#| fig-height: 5 

#Create dataframe with positions of all events
SpDF_gps<-data.frame()

for(d in 1:length(figtitle)){
    MnDF<-(TimesAll) %>%
    filter(Drift==figtitle[d],Species=="Mn")
  
   AnthroDF<-(TimesAll) %>%
    filter(Drift==figtitle[d],Species=="Anthro")
  
  GPSDF<-(GPSAll) %>%
    filter(Drift==figtitle[d])

  #Define position of each event
  for(c in 1:nrow(MnDF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,MnDF$UTC[c],units="mins"))))
    MnDF$Longitude[c]<-GPSDF$Longitude[Ind]
    MnDF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
  
   for(c in 1:nrow(AnthroDF)){
    Ind<-which.min(abs(as.numeric(difftime(GPSDF$UTC,AnthroDF$UTC[c],units="mins"))))
    AnthroDF$Longitude[c]<-GPSDF$Longitude[Ind]
    AnthroDF$Latitude[c]<-GPSDF$Latitude[Ind]
  }
  
  DF<-rbind(MnDF,AnthroDF)
  
SpDF_gps<-rbind(DF,SpDF_gps)
DF<-data.frame()
MnDF<-data.frame()
AnthroDF<-data.frame()
}

#define boundaries of the map
lon1=-132;lon2=-114;lat1=27;lat2=50

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Map with only drift tracks 
autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPSAll,aes(Longitude,Latitude),size=0.1)+
  xlab('Longitude')+ylab('Latitude')+
  ggtitle('All Drifts')


autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPSAll,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=SpDF_gps,aes(x=Longitude,y=Latitude,color=Species))+
  scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle('All Drifts: Humpback whales and Ships')

```

# All-drift Timeseries

```{r}
#| echo: false
#| message: false
#| warning: false
#create counts vectors to compare across time
# get counts by hour of day- drift 10 is earliest and drift20 is latest
daybins = seq(as.POSIXct(min(TimesAll$UTC)),as.POSIXct(max(TimesAll$UTC)),'days')

#need pracma for histc
if(!require('pracma')) install.packages('pracma')
library(pracma)
library(dplyr)

#run through for each drift and add on to dataframe
allcounts = data.frame(daybins)
tempMn = allcounts; tempAn = allcounts

for (iD in 1:length(figtitle)){

driftTimes = filter(TimesAll,Drift==figtitle[iD])
countdataMn = histc(as.numeric(driftTimes[driftTimes$Species=="Mn",]$UTC),as.numeric(daybins))
countdataAnth = histc(as.numeric(driftTimes[driftTimes$Species=="Anthro",]$UTC),as.numeric(daybins))

countdfMn = data.frame(daybins)
countdfAn = data.frame(daybins)
if (iD > 1){
  #make separate df for whales, anthro and then add together
  countdfMn$counts = countdataMn$cnt
  countdfMn$drift = rep(figtitle[iD],length(daybins))
  countdfMn$id = rep("Mn",length(daybins))
  countdfAn$counts = countdataAnth$cnt
  countdfAn$drift = rep(figtitle[iD],length(daybins))
  countdfAn$id = rep("Anthro",length(daybins))

  driftcounts = rbind(countdfMn,countdfAn)
  allcounts = rbind(allcounts,driftcounts)
}else{
  tempMn$counts = countdataMn$cnt; tempMn$id = rep("Mn",length(daybins))
  tempAn$counts = countdataAnth$cnt; tempAn$id = rep("Anthro",length(daybins))
  
  allcounts = rbind(tempMn,tempAn)
allcounts$drift = rep(figtitle[iD],length(daybins)*2)
}
}

#change zeros to nans so they don't plot
allcounts$counts[allcounts$counts==0]=NA

#plotting
ggplot(data=allcounts,aes(x=daybins,y=counts,color=id))+ 
geom_point()+
  scale_color_manual(values=c(ShipColor,MnColor))+
facet_wrap(~drift,ncol=1)

```

# the end!
