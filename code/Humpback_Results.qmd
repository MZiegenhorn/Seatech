---
title: "Humpback Data Analysis"
author: "Anne Simonis"
format: pdf
editor: visual
---

## Goals of this study

Investigate the co-occurrence of humpback whales and vessel noise.

## Data

Acoustic data was collected from drifting acoustic recorders during the 2018 California Current Ecosystem survey. See [Simonis et al 2020](https://repository.library.noaa.gov/view/noaa/27223) for more details. Data analyzed here includes CCES Drifts 10, 12, 13, 14, 16, 20.

## Combine Logs

The presence of humpback whales and ships were logged by 3 Seatech analysts, including Virginia Pearson, Audrey Bahnke, and Sarah Bahnke.

```{r}
#| echo: false
#| message: false
#| warning: false

# # # if (!require("pacman")) install.packages("pacman")
# if(!require('devtools')) install.packages('devtools')
# # install from GitHub
# devtools::install_github('TaikiSan21/PAMmisc')
# devtools::install_github('ericpante/marmap')
suppressMessages(pacman::p_load(knitr,here,lubridate,dplyr,magrittr,xlsx,RSQLite,viridis,marmap,ggplot2,suncalc,ggnewscale,PAMmisc,stringr))

#Sarah's logs
LogSB<-list.files(here('data','2023','Humpback whales','SB'), pattern='.xls',full.names = TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments) %>%
  mutate(Analyst='SB')

#Virginia's logs
LogVP<-list.files(here('data','2023','Humpback whales','VP'), pattern='.xls',full.names = TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments)%>%
  mutate(Analyst='VP')

#Audrey's logs
LogAB<-list.files(here('data','2023','Humpback whales','AB'), pattern='.xls',full.names = TRUE) %>%
  lapply(read.xlsx,sheetName='Detections') %>%
  bind_rows %>%
  select(Input.file,Species.Code,Call,Start.time,End.time,Comments)%>%
  mutate(Analyst='AB')

Log<-rbind(LogSB,LogVP,LogAB)

#Save Humpback and Anthropogenic sounds and remove duplicates
Log <-Log %>%
  filter(Species.Code %in% c('Mn','Anthro')) %>%
  filter(Call %in% c("Ship/Other","Ship/Small Boat",
                     "Song","Non-Song","Unspecified",'All')) %>%
  distinct() 

#Rename Drifts with word 'Drift'
Log$Input.file<-str_replace(Log$Input.file,'Drift-','CCES_')
Log$Input.file<-str_replace(Log$Input.file,'Drift_','CCES_')

#Define Drift Number based on input file
Ind<-str_locate(Log$Input.file,'CCES_')
Log$Drift<-substr(Log$Input.file,Ind+5,Ind+7)
Log$Drift<-as.numeric(gsub('\\\\','',Log$Drift))

#Only count presence during 'recording on' times

#load database
sqlite <- dbDriver("SQLite")
dbfiles<-list.files(here('data','2023','CCES2018_Drifts','Beaked whales'),full.names=TRUE)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#Drift 10
#extract recording on times from sound acquisition table for each drift
conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,'Drift-10')))])
DF10 <- dbReadTable(conn, "Sound_Acquisition")    
GPS10<-dbReadTable(conn,"gpsData")
dbDisconnect(conn)

DF10<-DF10 %>%
  mutate(Status=gsub(" ","",Status))

StartUTC<-DF10 %>% 
  filter(Status=="Start") %>%
  mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Start) 

StopUTC<-DF10 %>% 
  filter(Status=="Stop") %>%
  mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Stop) 

CCES_010<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
  mutate(Drift = 'CCES_010')

#define if humpbacks were present/absent for each bin 
Mn10<-filter(Log,Species.Code=="Mn")
Mn10$UTC<-with_tz(Mn10$Start.time,tz="GMT")

CCES_010$Mn<-'Absent'

for(m in 1:nrow(Mn10)){
  IndMn<-which(CCES_010$Start<=Mn10$Start.time[m] & CCES_010$Stop>=Mn10$End.time[m])
  if(length(IndMn)>0){CCES_010$Mn[IndMn]<-'Present'}
}
CCES_010Mn<-CCES_010 %>% 
  filter(Mn=="Present")%>%
  mutate(Species='Humpback whale') %>%
  select(Start,Drift,Species)

#define if ships were present/absent for each bin 
Ships10<-filter(Log,Species.Code=="Anthro")
Ships10$UTC<-with_tz(Ships10$Start.time,tz="GMT")
CCES_010$Ship<-'Absent'

for(s in 1:nrow(Ships10)){
  IndShip<-which(CCES_010$Start<=Ships10$Start.time[s] & CCES_010$Stop>=Ships10$End.time[s])
   if(length(IndShip)>0){CCES_010$Ship[IndShip]<-'Present'}
}

CCES_010Ships<-CCES_010 %>% 
  filter(Ship=="Present") %>%
  mutate(Species='Ships') %>%
  select(Start,Drift,Species)

CCES_010<-rbind(CCES_010Mn,CCES_010Ships)
CCES_010$UTC<-CCES_010$Start
CCES_010$Species<-as.factor(CCES_010$Species)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#Drift 12
#extract recording on times from sound acquisition table for each drift
conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,'Drift-12')))])
DF12 <- dbReadTable(conn, "Sound_Acquisition")    
GPS12<-dbReadTable(conn,"gpsData")
dbDisconnect(conn)

DF12<-DF12 %>%
  mutate(Status=gsub(" ","",Status))

StartUTC<-DF12 %>% 
  filter(Status=="Start") %>%
  mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Start) 

StopUTC<-DF12 %>% 
  filter(Status=="Stop") %>%
  mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Stop) 

CCES_012<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
  mutate(Drift = 'CCES_012')

#define if humpbacks were present/absent for each bin 
Mn12<-filter(Log,Species.Code=="Mn")
Mn12$UTC<-with_tz(Mn12$Start.time,tz="GMT")

CCES_012$Mn<-'Absent'

for(m in 1:nrow(Mn12)){
  IndMn<-which(CCES_012$Start<=Mn12$Start.time[m] & CCES_012$Stop>=Mn12$End.time[m])
  if(length(IndMn)>0){CCES_012$Mn[IndMn]<-'Present'}
}
CCES_012Mn<-CCES_012 %>% 
  filter(Mn=="Present")%>%
  mutate(Species='Humpback whale') %>%
  select(Start,Drift,Species)

#define if ships were present/absent for each bin 
Ships12<-filter(Log,Species.Code=="Anthro")
Ships12$UTC<-with_tz(Ships12$Start.time,tz="GMT")
CCES_012$Ship<-'Absent'

for(s in 1:nrow(Ships12)){
  IndShip<-which(CCES_012$Start<=Ships12$Start.time[s] & CCES_012$Stop>=Ships12$End.time[s])
   if(length(IndShip)>0){CCES_012$Ship[IndShip]<-'Present'}
}

CCES_012Ships<-CCES_012 %>% 
  filter(Ship=="Present") %>%
  mutate(Species='Ships') %>%
  select(Start,Drift,Species)

CCES_012<-rbind(CCES_012Mn,CCES_012Ships)
CCES_012$UTC<-CCES_012$Start
CCES_012$Species<-as.factor(CCES_012$Species)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#Drift 13
#extract recording on times from sound acquisition table for each drift
conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,'Drift-13')))])
DF13 <- dbReadTable(conn, "Sound_Acquisition")    
GPS13<-dbReadTable(conn,"gpsData")
dbDisconnect(conn)

DF13<-DF13 %>%
  mutate(Status=gsub(" ","",Status))

StartUTC<-DF13 %>% 
  filter(Status=="Start") %>%
  mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Start) 

StopUTC<-DF13 %>% 
  filter(Status=="Stop") %>%
  mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Stop) 

CCES_013<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
  mutate(Drift = 'CCES_013')

#define if humpbacks were present/absent for each bin 
Mn13<-filter(Log,Species.Code=="Mn")
Mn13$UTC<-with_tz(Mn13$Start.time,tz="GMT")

CCES_013$Mn<-'Absent'

for(m in 1:nrow(Mn13)){
  IndMn<-which(CCES_013$Start<=Mn13$Start.time[m] & CCES_013$Stop>=Mn13$End.time[m])
  if(length(IndMn)>0){CCES_013$Mn[IndMn]<-'Present'}
}
CCES_013Mn<-CCES_013 %>% 
  filter(Mn=="Present")%>%
  mutate(Species='Humpback whale') %>%
  select(Start,Drift,Species)

#define if ships were present/absent for each bin 
Ships13<-filter(Log,Species.Code=="Anthro")
Ships13$UTC<-with_tz(Ships13$Start.time,tz="GMT")
CCES_013$Ship<-'Absent'

for(s in 1:nrow(Ships13)){
  IndShip<-which(CCES_013$Start<=Ships13$Start.time[s] & CCES_013$Stop>=Ships13$End.time[s])
   if(length(IndShip)>0){CCES_013$Ship[IndShip]<-'Present'}
}

CCES_013Ships<-CCES_013 %>% 
  filter(Ship=="Present") %>%
  mutate(Species='Ships') %>%
  select(Start,Drift,Species)

CCES_013<-rbind(CCES_013Mn,CCES_013Ships)
CCES_013$UTC<-CCES_013$Start
CCES_013$Species<-as.factor(CCES_013$Species)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#Drift 14
#extract recording on times from sound acquisition table for each drift
conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,'Drift-15')))])
DF14 <- dbReadTable(conn, "Sound_Acquisition")    
GPS14<-dbReadTable(conn,"gpsData")
dbDisconnect(conn)

DF14<-DF14 %>%
  mutate(Status=gsub(" ","",Status))

StartUTC<-DF14 %>% 
  filter(Status=="Start") %>%
  mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Start) 

StopUTC<-DF14 %>% 
  filter(Status=="Stop") %>%
  mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Stop) 

CCES_014<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
  mutate(Drift = 'CCES_014')

#define if humpbacks were present/absent for each bin 
Mn14<-filter(Log,Species.Code=="Mn")
Mn14$UTC<-with_tz(Mn14$Start.time,tz="GMT")

CCES_014$Mn<-'Absent'

for(m in 1:nrow(Mn14)){
  IndMn<-which(CCES_014$Start<=Mn14$Start.time[m] & CCES_014$Stop>=Mn14$End.time[m])
  if(length(IndMn)>0){CCES_014$Mn[IndMn]<-'Present'}
}
CCES_014Mn<-CCES_014 %>% 
  filter(Mn=="Present")%>%
  mutate(Species='Humpback whale') %>%
  select(Start,Drift,Species)

#define if ships were present/absent for each bin 
Ships14<-filter(Log,Species.Code=="Anthro")
Ships14$UTC<-with_tz(Ships14$Start.time,tz="GMT")
CCES_014$Ship<-'Absent'

for(s in 1:nrow(Ships14)){
  IndShip<-which(CCES_014$Start<=Ships14$Start.time[s] & CCES_014$Stop>=Ships14$End.time[s])
   if(length(IndShip)>0){CCES_014$Ship[IndShip]<-'Present'}
}

CCES_014Ships<-CCES_014 %>% 
  filter(Ship=="Present") %>%
  mutate(Species='Ships') %>%
  select(Start,Drift,Species)

CCES_014<-rbind(CCES_014Mn,CCES_014Ships)
CCES_014$UTC<-CCES_014$Start
CCES_014$Species<-as.factor(CCES_014$Species)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#Drift 16
#extract recording on times from sound acquisition table for each drift
conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,'Drift-16')))])
DF16 <- dbReadTable(conn, "Sound_Acquisition")    
GPS16<-dbReadTable(conn,"gpsData")
dbDisconnect(conn)

DF16<-DF16 %>%
  mutate(Status=gsub(" ","",Status))

StartUTC<-DF16 %>% 
  filter(Status=="Start") %>%
  mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Start) 

StopUTC<-DF16 %>% 
  filter(Status=="Stop") %>%
  mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Stop) 

CCES_016<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
  mutate(Drift = 'CCES_016')

#define if humpbacks were present/absent for each bin 
Mn16<-filter(Log,Species.Code=="Mn")
Mn16$UTC<-with_tz(Mn16$Start.time,tz="GMT")

CCES_016$Mn<-'Absent'

for(m in 1:nrow(Mn16)){
  IndMn<-which(CCES_016$Start<=Mn16$Start.time[m] & CCES_016$Stop>=Mn16$End.time[m])
  if(length(IndMn)>0){CCES_016$Mn[IndMn]<-'Present'}
}
CCES_016Mn<-CCES_016 %>% 
  filter(Mn=="Present")%>%
  mutate(Species='Humpback whale') %>%
  select(Start,Drift,Species)

#define if ships were present/absent for each bin 
Ships16<-filter(Log,Species.Code=="Anthro")
Ships16$UTC<-with_tz(Ships16$Start.time,tz="GMT")
CCES_016$Ship<-'Absent'

for(s in 1:nrow(Ships16)){
  IndShip<-which(CCES_016$Start<=Ships16$Start.time[s] & CCES_016$Stop>=Ships16$End.time[s])
   if(length(IndShip)>0){CCES_016$Ship[IndShip]<-'Present'}
}

CCES_016Ships<-CCES_016 %>% 
  filter(Ship=="Present") %>%
  mutate(Species='Ships') %>%
  select(Start,Drift,Species)

CCES_016<-rbind(CCES_016Mn,CCES_016Ships)
CCES_016$UTC<-CCES_016$Start
CCES_016$Species<-as.factor(CCES_016$Species)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#Drift 20
#extract recording on times from sound acquisition table for each drift
conn <- dbConnect(sqlite,dbfiles[which(!is.na(str_match(dbfiles,'Drift-20')))])
DF20 <- dbReadTable(conn, "Sound_Acquisition")    
GPS20<-dbReadTable(conn,"gpsData")
dbDisconnect(conn)

DF20<-DF20 %>%
  mutate(Status=gsub(" ","",Status))

StartUTC<-DF20 %>% 
  filter(Status=="Start") %>%
  mutate(Start = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Start) 

StopUTC<-DF20 %>% 
  filter(Status=="Stop") %>%
  mutate(Stop = as.POSIXct(UTC,'%Y-%m-%d %H:%M:%OS',tz='GMT')) %>%
  select(Stop) 

CCES_020<-data.frame(Start=StartUTC,Stop=StopUTC) %>%
  mutate(Drift = 'CCES_020')

#define if humpbacks were present/absent for each bin 
Mn20<-filter(Log,Species.Code=="Mn")
Mn20$UTC<-with_tz(Mn20$Start.time,tz="GMT")

CCES_020$Mn<-'Absent'

for(m in 1:nrow(Mn20)){
  IndMn<-which(CCES_020$Start<=Mn20$Start.time[m] & CCES_020$Stop>=Mn20$End.time[m])
  if(length(IndMn)>0){CCES_020$Mn[IndMn]<-'Present'}
}
CCES_020Mn<-CCES_020 %>% 
  filter(Mn=="Present")%>%
  mutate(Species='Humpback whale') %>%
  select(Start,Drift,Species)

#define if ships were present/absent for each bin 
Ships20<-filter(Log,Species.Code=="Anthro")
Ships20$UTC<-with_tz(Ships20$Start.time,tz="GMT")
CCES_020$Ship<-'Absent'

for(s in 1:nrow(Ships20)){
  IndShip<-which(CCES_020$Start<=Ships20$Start.time[s] & CCES_020$Stop>=Ships20$End.time[s])
   if(length(IndShip)>0){CCES_020$Ship[IndShip]<-'Present'}
}

CCES_020Ships<-CCES_020 %>% 
  filter(Ship=="Present") %>%
  mutate(Species='Ships') %>%
  select(Start,Drift,Species)

CCES_020<-rbind(CCES_020Mn,CCES_020Ships)
CCES_020$UTC<-CCES_020$Start
CCES_020$Species<-as.factor(CCES_020$Species)
```

## Plots

### Diel Plot

```{r}
#Define Figure Options

figtitle10<-'Drift 10'
figtitle12<-'Drift 12'
figtitle13<-'Drift 13'
figtitle14<-'Drift 14'
figtitle16<-'Drift 16'
figtitle20<-'Drift 20'
MnColor = 'magenta'
ShipColor = 'orange'
```

```{r}
#| echo: false
#| message: false
#| warning: false

GPS10$UTC<-as.POSIXct(GPS10$UTC,'%Y-%m-%d %H:%M',tz='GMT')
GPS12$UTC<-as.POSIXct(GPS12$UTC,'%Y-%m-%d %H:%M',tz='GMT')
GPS13$UTC<-as.POSIXct(GPS13$UTC,'%Y-%m-%d %H:%M',tz='GMT')
GPS14$UTC<-as.POSIXct(GPS14$UTC,'%Y-%m-%d %H:%M',tz='GMT')
GPS16$UTC<-as.POSIXct(GPS16$UTC,'%Y-%m-%d %H:%M',tz='GMT')
GPS20$UTC<-as.POSIXct(GPS20$UTC,'%Y-%m-%d %H:%M',tz='GMT')

plotPresGrid(Mn10,start=min(GPS10$UTC),end=max(GPS10$UTC),type="presence",timeBin="minute",gps=GPS10,title=paste0(figtitle10,': Humpback whales'),fill=MnColor)

plotPresGrid(Ships10,start=min(GPS10$UTC),end=max(GPS10$UTC),timeBin="minute",type="presence",gps=GPS10,title=paste0(figtitle10,': Ships'),fill=ShipColor)


plotPresGrid(Mn12,start=min(GPS12$UTC),end=max(GPS12$UTC),type="presence",timeBin="minute",gps=GPS12,title=paste0(figtitle12,': Humpback whales'),fill=MnColor)

plotPresGrid(Ships12,start=min(GPS12$UTC),end=max(GPS12$UTC),timeBin="minute",type="presence",gps=GPS12,title=paste0(figtitle12,': Ships'),fill=ShipColor)

plotPresGrid(Mn13,start=min(GPS13$UTC),end=max(GPS13$UTC),type="presence",timeBin="minute",gps=GPS13,title=paste0(figtitle13,': Humpback whales'),fill=MnColor)

plotPresGrid(Ships13,start=min(GPS13$UTC),end=max(GPS13$UTC),timeBin="minute",type="presence",gps=GPS13,title=paste0(figtitle13,': Ships'),fill=ShipColor)

plotPresGrid(Mn14,start=min(GPS14$UTC),end=max(GPS14$UTC),type="presence",timeBin="minute",gps=GPS14,title=paste0(figtitle14,': Humpback whales'),fill=MnColor)

plotPresGrid(Ships14,start=min(GPS14$UTC),end=max(GPS14$UTC),timeBin="minute",type="presence",gps=GPS14,title=paste0(figtitle14,': Ships'),fill=ShipColor)

plotPresGrid(Mn16,start=min(GPS16$UTC),end=max(GPS16$UTC),type="presence",timeBin="minute",gps=GPS16,title=paste0(figtitle16,': Humpback whales'),fill=MnColor)

plotPresGrid(Ships16,start=min(GPS16$UTC),end=max(GPS16$UTC),timeBin="minute",type="presence",gps=GPS16,title=paste0(figtitle16,': Ships'),fill=ShipColor)

plotPresGrid(Mn20,start=min(GPS20$UTC),end=max(GPS20$UTC),type="presence",timeBin="minute",gps=GPS20,title=paste0(figtitle20,': Humpback whales'),fill=MnColor)

plotPresGrid(Ships20,start=min(GPS20$UTC),end=max(GPS20$UTC),timeBin="minute",type="presence",gps=GPS20,title=paste0(figtitle20,': Ships'),fill=ShipColor)
```

### **Weekly Plot**

```{r}
#| echo: false
#| message: false
#| warning: false
plotPresBar(CCES_010,start=min(GPS10$UTC),end=max(GPS10$UTC),timeBin="day",
            by='Species',title=paste0(figtitle10,': Daily presence'))+
  scale_fill_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")

plotPresBar(CCES_012,start=min(GPS12$UTC),end=max(GPS12$UTC),timeBin="day",
            by='Species',title=paste0(figtitle12,': Daily presence'))+
  scale_fill_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")

plotPresBar(CCES_013,start=min(GPS13$UTC),end=max(GPS13$UTC),timeBin="day",
            by='Species',title=paste0(figtitle13,': Daily presence'))+
  scale_fill_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")

plotPresBar(CCES_014,start=min(GPS14$UTC),end=max(GPS14$UTC),timeBin="day",
            by='Species',title=paste0(figtitle14,': Daily presence'))+
  scale_fill_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")

plotPresBar(CCES_016,start=min(GPS16$UTC),end=max(GPS16$UTC),timeBin="day",
            by='Species',title=paste0(figtitle16,': Daily presence'))+
  scale_fill_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")

plotPresBar(CCES_020,start=min(GPS20$UTC),end=max(GPS20$UTC),timeBin="day",
            by='Species',title=paste0(figtitle20,': Daily presence'))+
  scale_fill_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")
```

### Map

```{r}
#| echo: false
#| message: false
#| warning: false

#Define position of each event
for(c in 1:nrow(CCES_010)){
  Ind<-which.min(abs(as.numeric(difftime(GPS10$UTC,CCES_010$UTC[c],units="mins"))))
  CCES_010$Longitude[c]<-GPS10$Longitude[Ind]
  CCES_010$Latitude[c]<-GPS10$Latitude[Ind]
  }

#define boundaries of the map
lon1<-min(GPS10$Longitude)-2
lon2<-max(GPS10$Longitude)+2
lat1<-max(GPS10$Latitude)+2
lat2<-min(GPS10$Latitude)-2

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Create color palettes
blues<-c("royalblue4","royalblue3",
         "royalblue2","royalblue1")
greys<-c(grey(0.8),grey(0.93),grey(0.99))
dasbr.ptColor = "black"  # color for DASBR track and deployment points

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-100,-500,-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
    colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPS10,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=CCES_010,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle10)
```

```{r}
#| echo: false
#| message: false
#| warning: false

#Define position of each event
for(c in 1:nrow(CCES_012)){
  Ind<-which.min(abs(as.numeric(difftime(GPS12$UTC,CCES_012$UTC[c],units="mins"))))
  CCES_012$Longitude[c]<-GPS12$Longitude[Ind]
  CCES_012$Latitude[c]<-GPS12$Latitude[Ind]
  }

#define boundaries of the map
lon1<-min(GPS12$Longitude)-2
lon2<-max(GPS12$Longitude)+2
lat1<-max(GPS12$Latitude)+2
lat2<-min(GPS12$Latitude)-2

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Create color palettes
blues<-c("royalblue4","royalblue3",
         "royalblue2","royalblue1")
greys<-c(grey(0.8),grey(0.93),grey(0.99))
dasbr.ptColor = "black"  # color for DASBR track and deployment points

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-120,-500,-1200),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
    colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPS12,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=CCES_012,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle12)

```

```{r}
#| echo: false
#| message: false
#| warning: false

#Define position of each event
for(c in 1:nrow(CCES_013)){
  Ind<-which.min(abs(as.numeric(difftime(GPS13$UTC,CCES_013$UTC[c],units="mins"))))
  CCES_013$Longitude[c]<-GPS13$Longitude[Ind]
  CCES_013$Latitude[c]<-GPS13$Latitude[Ind]
  }

#define boundaries of the map
lon1<-min(GPS13$Longitude)-2
lon2<-max(GPS13$Longitude)+2
lat1<-max(GPS13$Latitude)+2
lat2<-min(GPS13$Latitude)-2

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Create color palettes
blues<-c("royalblue4","royalblue3",
         "royalblue2","royalblue1")
greys<-c(grey(0.8),grey(0.93),grey(0.99))
dasbr.ptColor = "black"  # color for DASBR track and deployment points

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-120,-500,-1200),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
    colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPS13,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=CCES_013,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle13)

```

```{r}
#| echo: false
#| message: false
#| warning: false
#NO DETECTIONS ON 14 


# #Define position of each event
# for(c in 1:nrow(CCES_014)){
#   Ind<-which.min(abs(as.numeric(difftime(GPS14$UTC,CCES_014$UTC[c],units="mins"))))
#   CCES_014$Longitude[c]<-GPS14$Longitude[Ind]
#   CCES_014$Latitude[c]<-GPS14$Latitude[Ind]
#   }
# 
# #define boundaries of the map
# lon1<-min(GPS14$Longitude)-2
# lon2<-max(GPS14$Longitude)+2
# lat1<-max(GPS14$Latitude)+2
# lat2<-min(GPS14$Latitude)-2
# 
# #Extract bathymetry data from NOAA (saves local file to speed future performance)
# bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)
# 
# #Create color palettes
# blues<-c("royalblue4","royalblue3",
#          "royalblue2","royalblue1")
# greys<-c(grey(0.8),grey(0.93),grey(0.99))
# dasbr.ptColor = "black"  # color for DASBR track and deployment points
# 
# autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
#   coord_cartesian(expand = 0)+
#   geom_contour(aes(z=z),breaks=c(-120,-500,-1200),color="gray24")+
#   scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
#     colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
#   geom_point(data=GPS14,aes(Longitude,Latitude),size=0.1)+
#   new_scale_color()+
#   geom_point(data=CCES_014,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
#   xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle14)

```

```{r}
#| echo: false
#| message: false
#| warning: false

#Define position of each event
for(c in 1:nrow(CCES_016)){
  Ind<-which.min(abs(as.numeric(difftime(GPS16$UTC,CCES_016$UTC[c],units="mins"))))
  CCES_016$Longitude[c]<-GPS16$Longitude[Ind]
  CCES_016$Latitude[c]<-GPS16$Latitude[Ind]
  }

#define boundaries of the map
lon1<-min(GPS16$Longitude)-2
lon2<-max(GPS16$Longitude)+2
lat1<-max(GPS16$Latitude)+2
lat2<-min(GPS16$Latitude)-2

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Create color palettes
blues<-c("royalblue4","royalblue3",
         "royalblue2","royalblue1")
greys<-c(grey(0.8),grey(0.93),grey(0.99))
dasbr.ptColor = "black"  # color for DASBR track and deployment points

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-120,-500,-1200),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
    colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPS16,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=CCES_016,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle16)

```

```{r}
#| echo: false
#| message: false
#| warning: false

#Define position of each event
for(c in 1:nrow(CCES_020)){
  Ind<-which.min(abs(as.numeric(difftime(GPS20$UTC,CCES_020$UTC[c],units="mins"))))
  CCES_020$Longitude[c]<-GPS20$Longitude[Ind]
  CCES_020$Latitude[c]<-GPS20$Latitude[Ind]
}

#define boundaries of the map
lon1<-min(GPS20$Longitude)-2
lon2<-max(GPS20$Longitude)+2
lat1<-max(GPS20$Latitude)+2
lat2<-min(GPS20$Latitude)-2

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Create color palettes
blues<-c("royalblue4","royalblue3",
         "royalblue2","royalblue1")
greys<-c(grey(0.8),grey(0.93),grey(0.99))
dasbr.ptColor = "black"  # color for DASBR track and deployment points

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-120,-500,-1200),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPS20,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=CCES_020,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle(figtitle20)

```

```{r}
#| echo: false
#| message: false
#| warning: false

#define boundaries of the map
lon1=-132;lon2=-114;lat1=27;lat2=50

#Extract bathymetry data from NOAA (saves local file to speed future performance)
bat<-getNOAA.bathy(lon1,lon2,lat1,lat2,resolution=1,keep=TRUE)

#Create color palettes
blues<-c("royalblue4","royalblue3",
         "royalblue2","royalblue1")
greys<-c(grey(0.8),grey(0.93),grey(0.99))
dasbr.ptColor = "black"  # color for DASBR track and deployment points

autoplot.bathy(bat,geom=c('r'),coast=TRUE)+
  coord_cartesian(expand = 0)+
  geom_contour(aes(z=z),breaks=c(-1000),color="gray24")+
  scale_fill_gradientn(values = scales::rescale(c(min(bat), -120, 0, max(bat))),
                       colors = c("midnightblue", "royalblue3", "grey50", "grey80"),name="Depth (m)")+
  geom_point(data=GPS10,aes(Longitude,Latitude),size=0.1)+
  geom_point(data=GPS12,aes(Longitude,Latitude),size=0.1)+
  geom_point(data=GPS13,aes(Longitude,Latitude),size=0.1)+
  geom_point(data=GPS14,aes(Longitude,Latitude),size=0.1)+
  geom_point(data=GPS16,aes(Longitude,Latitude),size=0.1)+
  geom_point(data=GPS20,aes(Longitude,Latitude),size=0.1)+
  new_scale_color()+
  geom_point(data=CCES_010,aes(x=Longitude,y=Latitude,color=Species))+
  geom_point(data=CCES_012,aes(x=Longitude,y=Latitude,color=Species))+
  geom_point(data=CCES_013,aes(x=Longitude,y=Latitude,color=Species))+
  geom_point(data=CCES_016,aes(x=Longitude,y=Latitude,color=Species))+
  geom_point(data=CCES_020,aes(x=Longitude,y=Latitude,color=Species))+scale_color_manual(values=c(MnColor,ShipColor), labels=c("Humpback whales","Ships"),name="")+
  xlab('Longitude')+ylab('Latitude')+ggtitle('All Drifts')

```
